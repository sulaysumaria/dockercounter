{
	"info": {
		"_postman_id": "4c493e62-1ac4-4b3d-86e0-3718a5cdac63",
		"name": "devops challenge",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "POST",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "707dbbce-af59-44b6-b215-09523a94c3b4",
						"exec": [
							"pm.test(\"Response must be valid and have a body\", function () {",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
							"});",
							"pm.test(\"Count should be a number\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.count).to.be.an('number');",
							"    // set our env variable for the expected value",
							"    pm.environment.set(\"COUNT\", jsonData.count);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/count",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"count"
					]
				},
				"description": "\t"
			},
			"response": []
		},
		{
			"name": "GET",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4b875828-6456-4050-9a6e-bb510f7a78c8",
						"exec": [
							"pm.test(\"Response must be valid and have a body\", function () {",
							"     pm.response.to.be.ok; ",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Count should be a number\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.count).to.be.an('number');",
							"    // set our env variable for the expected value",
							"    pm.environment.set(\"COUNT\", jsonData.count);",
							"});",
							"pm.test(\"Count should be the expected value\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.count).to.eql(pm.environment.get(\"COUNT\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3000/count",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"count"
					]
				},
				"description": "\t"
			},
			"response": []
		}
	]
}
